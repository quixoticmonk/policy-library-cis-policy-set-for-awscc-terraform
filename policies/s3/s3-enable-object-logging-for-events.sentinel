# This policy requires that resources of type `awscc_s3_bucket` have object-level logging enabled for read/write events.

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

# Imports

import "tfconfig/v2" as tfconfig
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps
import "strings"

# Parameters

param event_type default "Read"

# Constants

const = {
	"policy_name":               "s3-enable-object-logging-for-events",
	"message":                   "Ensure that Object-level logging for " + event_type + " events is enabled for S3 buckets. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-s3-9 for more details.",
	"resource_s3_bucket":        "awscc_s3_bucket",
	"resource_cloudtrail_trail": "awscc_cloudtrail_trail",
}

# Functions

# Check if a bucket has object-level logging enabled for the specified event type
has_object_logging = func(bucket_name, trails, event_type) {
	for trails as _, trail {
		is_logging = maps.get(trail, "config.is_logging.constant_value", false)
		if !is_logging {
			continue
		}

		event_selectors = maps.get(trail, "config.event_selectors.constant_value", [])
		for event_selectors as _, selector {
			read_write_type = maps.get(selector, "read_write_type", "")

			# Check if the read_write_type matches the event_type parameter
			if (event_type is "Read" and read_write_type is "ReadOnly") or
				(event_type is "Write" and read_write_type is "WriteOnly") or
				read_write_type is "All" {

				data_resources = maps.get(selector, "data_resources", [])
				for data_resources as _, resource {
					resource_type = maps.get(resource, "type", "")
					if resource_type is "AWS::S3::Object" {
						values = maps.get(resource, "values", [])
						for values as _, value {
							if strings.has_prefix(value, "arn:aws:s3:::" + bucket_name + "/") {
								return true
							}
						}
					}
				}
			}
		}
	}

	return false
}

# Variables

config_resources = tf.config(tfconfig.resources)

s3_buckets = config_resources.type(const.resource_s3_bucket).resources
cloudtrail_trails = config_resources.type(const.resource_cloudtrail_trail).resources

# Find buckets without object-level logging for the specified event type
violations = []
for s3_buckets as _, bucket {
	bucket_name = maps.get(bucket, "config.bucket.constant_value", "")
	if bucket_name is "" {
		append(violations, bucket)
		continue
	}

	if !has_object_logging(bucket_name, cloudtrail_trails, event_type) {
		append(violations, bucket)
	}
}

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

# Outputs

print(report.generate_policy_report(summary))

# Rules

main = rule {
	violations is empty
}
