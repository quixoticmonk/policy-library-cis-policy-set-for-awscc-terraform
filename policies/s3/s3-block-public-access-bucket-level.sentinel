# This policy requires that resources of type `awscc_s3_bucket` have block public access settings enabled at a bucket level.

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

# Imports

import "tfconfig/v2" as tfconfig
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps

# Constants

const = {
	"policy_name": "s3-block-public-access-bucket-level",
	"message":     "S3 general purpose buckets should have block public access settings enabled at a bucket level. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-s3-1 for more details.",
	"resource":    "awscc_s3_bucket",
}

# Variables

config_resources = tf.config(tfconfig.resources)

s3_resources = config_resources.type(const.resource).resources

violations = collection.filter(s3_resources, func(res) {
	public_access_block_configuration = maps.get(res, "config.public_access_block_configuration", {})
	if public_access_block_configuration is empty {
		return true
	}

	if maps.get(public_access_block_configuration, "constant_value", {}) is empty {
		return true
	}

	block_public_acls = maps.get(public_access_block_configuration.constant_value, "block_public_acls", false)
	block_public_policy = maps.get(public_access_block_configuration.constant_value, "block_public_policy", false)
	ignore_public_acls = maps.get(public_access_block_configuration.constant_value, "ignore_public_acls", false)
	restrict_public_buckets = maps.get(public_access_block_configuration.constant_value, "restrict_public_buckets", false)

	return !(block_public_acls and block_public_policy and ignore_public_acls and restrict_public_buckets)
})

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

# Outputs

print(report.generate_policy_report(summary))

# Rules

main = rule {
	violations is empty
}
